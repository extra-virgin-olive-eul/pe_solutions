#!/usr/bin/env python3

'''
Program:     PE-P2_VSX.py
Author:      vsx-gh (https://github.com/vsx-gh)
Created:     20170928

Project Euler Problem 2:
    Each new term in the Fibonacci sequence is generated by adding the 
    previous two terms. By starting with 1 and 2, the first 10 terms 
    will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do 
    not exceed four million, find the sum of the even-valued terms.

I decided to have some fun with this and add in an argument to do evens
or odds, as well as define the upper term value you want to find.

'''

import sys
import argparse

def calculate_fib_recurse(fib_1, fib_2, mod_remainder, fib_limit, total_sum):
    """
    Calculate max Fibonacci term value using recursion. This will
    potentially hit Python's max recursion depth unless you change it
    (beware stack overflows and segfaults in so doing).
    """

    if fib_1 > fib_limit:
        return total_sum
    else:
        if fib_1 % 2 == mod_remainder:
            total_sum += fib_1
        return calculate_fib_recurse(fib_2, fib_1 + fib_2, mod_test, fib_limit, total_sum)



def calculate_fib_iterate(fib_max, mod_remainder):
    """
    Calculate max Fibonacci term using iteration. This is actually a
    generator, but we iterate over each Fibonacci term.
    """

    fib_1, fib_2 = 1, 2
    while fib_1 < fib_max:
        if fib_1 % 2 == mod_remainder:
            yield fib_1
        fib_1, fib_2 = fib_2, fib_1 + fib_2



# Get a max value to use
parser = argparse.ArgumentParser()
parser.add_argument('-m', '--fibmax',
                    required=True,
                    type=int,
                    help='Value of highest Fibonacci term to find'
                    )
parser.add_argument('-t', '--modtest',
                    required=True,
                    choices=['even', 'odd'],
                    help='Test to perform (odd or even)'
                    )
all_args = parser.parse_args()
mod_method = ['even', 'odd'].index(all_args.modtest)

# First two Fibonacci terms, i.e., sequence does NOT start with 0
first_fib, second_fib = 1, 2

# Recursion actually works for this problem's defined max value
#fib_total = calculate_fib_recurse(first_fib, second_fib, mod_method, all_args.fibmax, 0)
fib_total = sum(calculate_fib_iterate(all_args.fibmax, mod_method))     # Iterate/generate

print('Sum of {} Fibonacci terms where max term value < {}: {}'.format(['even', 'odd'][mod_method], all_args.fibmax, fib_total))

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
